/*
  File:        LicenseDialog.java-template
  Author:      Sternberg
  Date:
  Description: Present user with license agreement.  If he agrees, save a
    cookie.  If the cookie is already there, check the age of the program
    build; if it's older than m_program_validity_days, advise user to obtain
    an update.
*/

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;

public class LicenseDialog
{
    // The next line gets filled in the make process.
    private long m_build_date =
    private int m_program_validity_days = 120;
    private static String m_license_filename = "license.dat";

    public LicenseDialog( JFrame parent )
    {

//
// We're not checking for a license any more.  We're only checking
// the age of the build.
//

/*
        File license_file = new File( m_license_filename );

        if( license_file.exists() ) // check age of build
        {
*/

//
// Here comes the only reachable part of the code in this file...
//
            Calendar cal = Calendar.getInstance();
            Date today = cal.getTime();

            if( today.getTime()/1000 - m_build_date > 
                m_program_validity_days*24*3600 )
            {
                JOptionPane.showMessageDialog(
                  new JFrame(),
                  "You are running a version of Dimensioner " +
                  "that is over " + m_program_validity_days +
                  " days old.  Please visit the Nuance extranet to " +
                  "check for a more recent version.",
                  "Expiration",
                  0);
            }
/*
            else  
            {  // Verify IP address in license file is IP address of host.
                try
                {
                    BufferedReader reader = 
                      new BufferedReader(new FileReader(license_file));
                    String license_line = reader.readLine();
                    StringTokenizer st = null;
                    if( (license_line != null) && 
                        (license_line.length() > 0))
                    {
                        st = new StringTokenizer( license_line );
                    }
                    String tok = null;
                    while( (st != null) && st.hasMoreTokens() )
                    {
                        tok = st.nextToken();
                    }
                    if( (tok == null)
                    ||  ( ! tok.equals( hash(InetAddress.getLocalHost().
                                          getHostAddress()))))
                    {
                        JOptionPane.showMessageDialog(
                          new JFrame(),
                          "Invalid license.  Remove " + 
                          license_file.getAbsolutePath() + " and restart.",
                          "Invalid license",
                          0 );
                        System.exit(1);
                    }
                }
                catch( IOException ioe )
                {
                    System.err.println( ioe.toString() );
                    System.exit(1);
                }
            }
        } else     // prompt for license approval, create license
        {
            Dialog dialog = new Dialog( parent, "Dimensioner License", true);
    
            Panel  north = new Panel();    
            JTextArea text = new JTextArea("");
            text.append( "I agree to all your terms, no matter how onerous" );
            north.add( text );
    
            Panel south = new Panel();
            south.setLayout( new BorderLayout() );
    
            Button ok_button = new Button( "OK" );
            ok_button.addMouseListener( new OKListener( dialog ));
            south.add( ok_button, "West" );
    
            Button no_button = new Button( "No" );
            no_button.addMouseListener( new NoListener() );
            south.add( no_button, "East" );
    
            dialog.add(north,"North");
            dialog.add(south, "South" );
    
            dialog.pack();
            dialog.setVisible(true);
        }
*/
    }

    static void createLicense() throws IOException
    {
        FileWriter outfile = new FileWriter( m_license_filename );
        Calendar cal = Calendar.getInstance();
        Date today = cal.getTime();
        outfile.write( hash(today.toString()) + " " +
                       hash(InetAddress.getLocalHost().getHostAddress()) +
          "\n" );
        outfile.flush();
    }

    /** Boneheaded encryption scheme.  Just enough to foil very casual
     *  misuse of license file.
    */
    private static String hash( String str )
    {
        String result = new String();
        int code = 0;
        for( int i=0;i<str.length();i++ )
        {
            Character c = new Character(str.charAt(i));
            code =  code + (c.hashCode()*c.hashCode())%8840;
        }
        result = Long.toString( code );
        return result;
    }

class OKListener extends MouseAdapter
{
    OKListener( Dialog d ) { this.dialog = d; }

    public void mousePressed( MouseEvent event ) 
    {
        dialog.dispose();
        try
        {
            createLicense();
        }
        catch( IOException ioe )
        {
            System.err.println( ioe.toString() );
            System.exit(1);
        }
    }

    private Dialog dialog;
}

class NoListener extends MouseAdapter
{
    NoListener() { }

    public void mousePressed( MouseEvent event ) 
    {
        System.exit(0);
    }
}
}
