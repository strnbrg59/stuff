<HTML>

<TITLE> Memory Provisioning </TITLE>
<CENTER><FONT SIZE=12> Memory Provisioning </FONT></CENTER>
<CENTER> by Mark Mao and Ted Sternberg </CENTER>

<H1> Introduction </H1>

Provisioning for memory requirements is not an exact science.  We can,
however, make estimates by taking account of the grammar, compile-time
and run-time options, and environment.  

<P> The dimensioner, in its memory provisioning panel, provides one
estimate.  For a more accurate estimate, however, you need to compile
a package and follow the instructions below.

<H1> Server-side Memory Requirements </H1>

<P>
Considerations that affect recserver memory usage are the complexity
and size of the grammar, the acoustic model (e.g. English.America.1
vs. English.America.2), the number of recclient connections, n-best,
pruning etc.  Two-pass roughly triples total memory requirements.

<P>
Start a recserver with the command line script that will be used in the
deployment.  In NT, pull up the task manager to see the memory process
usage.  In Unix, the ps or top command will allow the process to be
monitored.  Observe the memory usage after the recserver finishes initializing.
That's the server start-up memory before any client connections.

<P> The server allocates more memory for each client connection it
establishes.  For English.America.1, about 5M will be allocated for
each new client connection.  For English.America.2, about 8M will be
allocated for each new client connection.  But this memory will be
recycled when the client disconnects.  So the recserver size will
stabilize at the point where it reached when the greatest number of
client connections existed simutaneously.

<P>
Suppose, for example, a server running a big stock-quote grammar using
English.America.2 started with a size of 100M (before any client
connections).  Suppose, further, that at the server's busiest moment,
there were 10 simutaneous client connections.  Then the server size
should stabilize around 100M + 10*8M = 180M.

<P>
The numbers we are using here (5M and 8M) are correct for fairly large
grammars.  For smaller grammars, they will be smaller.


<H1> Client-side Memory Requirements </H1>

Clients use significantly less memory than do servers.  Moreover,
client memory use is not affected by grammar complexity or acoustic
models.

<P>
If you are not using a multi-channel recclient, then the recclient is
part of your application process.  The memory requirement is really
the size of the application process, which is determined by the complexity
of your application.  Memory usage should not grow after start up.

<P>
Multi-channel recclients start up around 10M.  As applications
establish connections, memory usage grows but negligibly.

<H1> Oracle database Memory Requirements </H1>

Memory is always a good thing on a database server.  Consider 256
megabytes an absolute minimum for Oracle 8.x running on a PC.  Dynamic
grammars in compiled form occupy about eight times as much space as
their corresponding GSL representations.  Obviously, the more of this
you can keep resident in memory, the better.  Also, keep in mind that
intermediate results of calculations need memory too.

</HTML>
