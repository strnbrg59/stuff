/*
**   _______              __
**  / ___/ /  ___  __ _  / /  ___
** / /__/ _ \/ _ \/  ' \/ _ \/ _ \
** \___/_//_/\___/_/_/_/_.__/\___/ 
**
** This software is copyright (C) by the Lawrence Berkeley
** National Laboratory.  Permission is granted to reproduce
** this software for non-commercial purposes provided that
** this notice is left intact.
** 
** It is acknowledged that the U.S. Government has rights to
** this software under Contract DE-AC03-765F00098 between
** the U.S. Department of Energy and the University of
** California.
**
** This software is provided as a professional and academic
** contribution for joint exchange.  Thus it is experimental,
** is provided ``as is'', with no warranties of any kind
** whatsoever, no support, no promise of updates, or printed
** documentation.  By using this software, you acknowledge
** that the Lawrence Berkeley National Laboratory and
** Regents of the University of California shall have no
** liability with respect to the infringement of other
** copyrights by any part of this software.
**
*/
/* provided as a modification from source material derived from
   the VTK distribution.  In accordance with VTK software agreement
   the following also holds:
=========================================================================

Copyright (c) 1993-2000 Ken Martin, Will Schroeder, Bill Lorensen 
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither name of Ken Martin, Will Schroeder, or Bill Lorensen nor the names
   of any contributors may be used to endorse or promote products derived
   from this software without specific prior written permission.

 * Modified source versions must be plainly marked as such, and must not be
   misrepresented as being the original software.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/

#ifndef INCLUDED_VTKCHOMBOPARTICLESIMPL_H
#define INCLUDED_VTKCHOMBOPARTICLESIMPL_H

#include <string>
#include <map>
#include <boost/shared_array.hpp>
#include <vtkPolyDataSource.h>
#include "../utils/chomboSetGet.h"

class vtkPoints;
class vtkPolyData;
class vtkChomboReader;

template<class REAL_T> class vtkChomboParticlesImpl : public vtkChomboParticles
{
public:

    //
    // Ctors, dtor
    //
    vtkChomboParticlesImpl( vtkChomboReader * reader );
    virtual ~vtkChomboParticlesImpl();

    //
    // Overridden VTK methods.
    //
    void PrintSelf(ostream& os, vtkIndent indent);

    //
    // Interface for Python layer (vtk_stream.py).
    //  
    void SetChomboReader( vtkChomboReader * r );
    vtkPolyData * GetParticleOutput();

    const char * GetXComponent() const { return m_xComponent.c_str(); }
    const char * GetYComponent() const { return m_yComponent.c_str(); }
    const char * GetZComponent() const { return m_zComponent.c_str(); }
    void SetXComponent( char const * name );
    void SetYComponent( char const * name );
    void SetZComponent( char const * name );

    const char * GetXGlyphOrientationComponent() const
        { return m_xGlyphOrientationComponent.c_str(); }
    const char * GetYGlyphOrientationComponent() const
        { return m_yGlyphOrientationComponent.c_str(); }
    const char * GetZGlyphOrientationComponent() const
        { return m_zGlyphOrientationComponent.c_str(); }
    void SetXGlyphOrientationComponent( char const * name );
    void SetYGlyphOrientationComponent( char const * name );
    void SetZGlyphOrientationComponent( char const * name );

    void SetGlyphScalingComponent( const char * name );
    void SetDoScaleGlyphs( int yes_no );
    double GetGlyphScalingComponentMin() const
        { return m_glyphScalingComponentRange.first; }
    double GetGlyphScalingComponentMax() const
        { return m_glyphScalingComponentRange.second; }

    void SetDecimationFactor( double x ) { m_decimationFactor = x; }

    void SetFilteringComponent( char const * name );
    const char * GetFilteringComponent() const;
    double GetFilterMin() const { return m_filterLimits.first; }
    double GetFilterMax() const { return m_filterLimits.second; }
    void SetFilterMinMax( double lo, double hi );

    void SetOffsetFilteringComponent( char const * name );
    const char * GetOffsetFilteringComponent() const;
    double GetOffsetFilterMin() const { return m_offsetFilterLimits.first; }
    double GetOffsetFilterMax() const { return m_offsetFilterLimits.second; }
    void SetOffsetFilterMinMax( double lo, double hi );
    void SetOffsetFilterOffset( double x ) { m_offsetFilterOffset = x; }

    void SetMarkersArePoints( int yesno ) { m_markersArePoints = yesno; }
    void SetDoOrientGlyphs( int yesno ) { m_doOrientGlyphs = yesno; }

    int GetNumberOfSelectedParticles() const { return m_numSelectedPoints; }
    double * GetParticleXYZCoordinates( int particle_num ) const;
    double GetScalingScalarValue( int particle_num ) const;
    int    GetSelectedParticleNumber( int n ) const;

private:
    vtkChomboReader* m_chomboReader;
    vtkPolyData * m_polyData;

    std::string m_xComponent;
    std::string m_yComponent;
    std::string m_zComponent;

    std::string m_xGlyphOrientationComponent;
    std::string m_yGlyphOrientationComponent;
    std::string m_zGlyphOrientationComponent;

    int m_markersArePoints;
    std::string m_glyphScalingComponent;
    int m_doScaleGlyphs;                 // 0 or 1
    int m_doOrientGlyphs;
    std::pair<REAL_T,REAL_T> m_glyphScalingComponentRange;

    std::string m_filteringComponent; // If =="" then no filter.
    std::pair<REAL_T,REAL_T> m_filterLimits; // min and max    

    std::string m_offsetFilteringComponent; // If =="" then no filter.
    std::pair<REAL_T,REAL_T> m_offsetFilterLimits; // min and max
    REAL_T m_offsetFilterOffset;

    double m_decimationFactor;
    int    m_numSelectedPoints;

    boost::shared_array<REAL_T> m_x;
    boost::shared_array<REAL_T> m_y;
    boost::shared_array<REAL_T> m_z;
    boost::shared_array<REAL_T> m_glyphScaler;
    int * m_selectionMap;
    double * m_dblBuf;

    void PermuteForSlicingMode(
        boost::shared_array<REAL_T> x,
        boost::shared_array<REAL_T> y,
        boost::shared_array<REAL_T> z,
        char slicingDirection ) const;

    // Deliberately unimplemented:
    vtkChomboParticlesImpl(const vtkChomboParticlesImpl&);
    vtkChomboParticlesImpl&  operator=(const vtkChomboParticlesImpl&);
};


/** Functor for use in determining if a particle should or shouldn't be
 *  displayed.
*/
template<typename T> class Filterer
{
  public:
    Filterer( T lo, T hi, long decimationFactor )
        : m_lo(lo), m_hi(hi),
          m_decimationFactor( decimationFactor ),
          m_counter(0)
    { }

    bool operator()( T t )
    {
        return (m_lo <= t) && (t <= m_hi)
           &&  ((++m_counter) % m_decimationFactor == 0);
    }

    void resetCounter()
    {
        m_counter = 0;
    }
  private:
    T m_lo;
    T m_hi;
    long m_decimationFactor;
    long m_counter;
};

#endif // INCLUDED_VTKCHOMBOPARTICLESIMPL_H
