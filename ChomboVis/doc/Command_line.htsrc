<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>Command Line</title>
  </head>

  <body bgcolor="#111111" text="#FFFFFF" link="#AFE3EA" vlink="#D6B5E0"
    alink="#FFAD00">

<CENTER><FONT SIZE=18> Command Line </FONT></CENTER>
<TOC></TOC>
<HR>

The most important command line option is <TT>--help.</TT> It produces the following:
<P>
<PRE>
-------------------------------------------------------
Usage: chombovis [-i] [&lt;option1&gt;=&lt;value1&gt;[&lt;option2&gt;=&lt;value2&gt;[...]]] [something.hdf5]
Legal options:
  -i...leaves you at Python prompt (like 'python -i')
  slice_axis...axis perpendicular to a desired 2D slice
  axis_position...position along slice_axis (required if slice_axis is used)
  ignore_rc...1 => don't load .chombovisrc (default=0)
  state_file...saved state of a previous ChomboVis session, loaded
               before execution of any user_script.
  user_script...see examples directory
  cmd...Python command to execute (no spaces allowed!)
  off_screen...1 => render off-screen, rather than to monitor (default=0)
  texture...0 => don't use texture mapping (default=1)
  slices_off...1 => come up with no slices displayed (default=0)

  debug_level...0=nothing, 1=fatal, 2=error, 3=warning, 4=info, 5=trace (default=2)
  use_render_widget...0 => avoids VTK bug that results in segfault on some systems
     (default=1)
  server_fifo...named pipe to receive commands over (default=None, legal values are
      strings, should not be name of an existing file)
  --help...prints this message
-------------------------------------------------------
</PRE>
<P>

The convention for options is <EM>keyword=value,</EM> for example
<TT>cmd='c.iso.toggleVisibility(1)'</TT> or <TT>slice_axis = y.</TT>
Spaces around the equals sign are optional.  There are, however, two
exceptions to the <EM>keyword=value</EM> convention: <TT>-i</TT>
(which must follow <TT>chombovis</TT> immediately) and
<TT>--help</TT>.


<H1> <TT>-i</TT> </H1>

Put <TT>-i</TT> right after <TT>chombovis</TT>, e.g.

<PRE>
<P>
    chombovis -i vortex.hdf5
<P>
</PRE>

and after ChomboVis starts, it leaves you at a usable Python prompt. 

<P>
From that Python prompt you can load ChomboVis user scripts at any
time.  For example,

<P>
<TT>&gt;&gt;&gt import myscript</TT>
<P>

where myscript.py might make calls into the <A
HREF="API.html">ChomboVis API.</A>

<P> You can also issue individual commands.  For convenience, you do
not need to import any modules or libraries to use the ChomboVis API;
the symbol <TT>c</TT> refers to the most recently loaded ChomboVis
object.  So for example,

<P>
<TT>&gt;&gt;&gt c.reader.setVisibleLevelMax(2)</TT>
<P>

or, taking advantage of Python itself,

<P>
<PRE>
&gt;&gt;&gt for i in range(0, c.reader.getNumberOfLevels()):
...    c.reader.setVisibleLevelMax(i)
...    c.misc.hardCopy( outfile_name = 'level_' + str(i), mag_factor=2 )
</PRE>

<P> Caveat: ChomboVis will not run in the background, if you say <TT>-i</TT>.

<H1><TT>slice_axis</TT> and <TT>axis_position</TT></H1>

These are used either together, or not at all.  They cause ChomboVis
to bring up a slice one dimension lower than that of your dataset.
<TT>slice_axis</TT> can be <TT>x</TT>,<TT>y</TT> or <TT>z</TT> (with
<TT>z</TT> not used when slicing a two-dimensional dataset down to one
dimension).  <TT>axis_position</TT> should be within the domain along
the direction indicated by <TT>slice_axis.</TT>  Example:

<P>
<PRE>
    chombovis -i slice_axis=y axis_position=0.67 vortex.hdf5
</PRE>
<P>

<H1><TT>ignore_rc</TT></H1>

Set to 1, this option prevents ChomboVis from executing your
.chombovisrc file (if you have one).  When debugging a user script (to
say nothing of debugging ChomboVis itself) it's useful to rule out
interactions with .chombovisrc.  Example:

<P>
<PRE>
    chombovis ignore_rc=1 test.hdf5
</PRE>
<P>

The default is for ChomboVis to look for a file .chombovisrc --
looking first in the current working directory, then in $HOME, and
lastly in $CHOMBOVIS_HOME -- and then execute it as though it were a
<A HREF="API.html">user script.</A>


<H1><TT>state_file</TT></H1>

A state file is a description of the state of a ChomboVis session.
The easiest way to create one is to pull down the <A
HREF="Other_features.html">File</A> menu and then select <EM>Save
state.</EM> ChomboVis deals with state_file after it executes
.chombovisrc, but before it acts on (see below) user_script.  Example:

<P>
<PRE>
    chombovis state_file=myturb.state turb.hdf5
</PRE>
<P>

The result of attempting to load state associated with one hdf5 file
into a ChomboVis displaying another hdf5 file is undefined.


<H1><TT>user_script</TT></H1>

This indicates a Python script (typically making use of the <A
HREF="API.html">ChomboVis API</A>).  The script is executed after
.chombovisrc and after acting on the <TT>state_file</TT> option (if
any).  ChomboVis deals with <TT>user_script</TT> after executing
.chombovis (if any) and dealing with the <TT>state_file</TT> command
line option (if any).  Example:

<P>
<PRE>
    chombovis -iuser_script=examples/bulldog.py data/test.2d.hdf5 
</PRE>
<P>

<H1><TT>cmd</TT></H1>

When you have just one command you want executed at start-up, it may
be easier to use the <TT>cmd</TT> option, than to write a user script.
Examples:

<P>
<PRE>
    chombovis cmd='c.reader.setVisibleLevelMax(3)' turb.hdf5
</PRE>
<P>

<P>
<PRE>
    chombovis cmd='c.reader.setVisibleLevelMax(3);c.misc.hardCopy(\"turb.ppm\");sys.exit(0)' turb.hdf5
</PRE>
<P>

As we see, more than one command is possible.

<P> Caveat: You may not put spaces in the command.  In particular,
this rules out importing a module (it was by shear luck that the sys
module was available for that second example; the only symbol we
guarantee to be available is "c", which refers to the latest ChomboVis
instance).


<H1><TT>texture</TT></H1>

Set texture=0 if your video card is incapable of doing texture
mapping, or has inadequate video memory.  Nothing bad happens if you
leave texture at its default (1); if there is a problem, you will
simply not see your slice.

<P> For proper rendering of non-cell-centered data, you need to leave
texture=1 (the default).

<H1><TT>slices_off</TT></H1>

You can make large datasets load faster by setting slices_off=1.  You
can still turn slices on, as needed, from the slice dialog.  With
slices_off set to 1, ChomboVis does not load any field data at all.
Until you pull down the Visualization-->Data_selection menu (and
select a data component), most of the visualization options are
disabled.

<H1><TT>off_screen=1</TT></H1> 
Causes VTK to not render your dataset on a monitor (yours or anyone
else's).  To see the rendering, you need to save it to a file.
Example:

<P>
<PRE>
    chombovis -i off_screen=1 cmd='c.misc.setRenderWidgetSize(800,900);c.misc.hardCopy("poisson.ppm")' poisson.hdf5
</PRE>
<P>

Although <TT>off_screen</TT> suppresses VTK rendering, the normal
ChomboVis menu bar still appears on your screen, if you put a "-i" right
after "chombovis" on your command line.  Thus if you do not
wish to use <TT>cmd</TT> or <TT>user_script</TT>, you can use the GUI
to bring the rendered image to any desired state (except rotation,
panning and zooming).  But of course you will not see the results in
real time.

<P> Caveat 1: Although you can save the image by pulling down the <A
HREF="Other_features.html">File menu</A> and selecting <EM>Save
image,</EM> in off-screen mode the magnification factor will have no
effect.  You need to specify the image size as we did in the example
above -- by calling setRenderWidgetSize().

<P> Caveat 2: In off-screen mode, the colormap legend and 2D annotation will not
show up on saved images.  (But 3D annotation will show up.)


<H1><TT>debug_level</TT></H1>

The debug level is probably not of interest to anyone but ChomboVis
developers.  That said, there are five debug levels, corresponding to
increasing amounts of output into your xterm.  The default debug level
is 3.

<H1><TT>use_render_widget</TT></H1>

There is a certain VTK class, the vtkTkRenderWidget, that seems to
misbehave on some systems.  The symptom is a segfault, which (if you
set debug_level to 5) occurs right after the execution trace mentions
"_initTopWindows").  If this is what happens on your system, even
though you are not using gcc 2.96, then use_render_widget=0 may be
your only hope to run ChomboVis.  The result is a ChomboVis that works
in every respect except that you can not rotate and zoom the rendered
image by moving your mouse over it.  Instead, you need to make the
same mouse movements inside a separate window that pops up.

<H1><TT>server_fifo</TT></H1>

Use this if you want to control ChomboVis from another process.  For more, see
<A HREF="Other_features.html">here.</A>


<H1><TT>--help</TT></H1>

You'll get the command-line help text if you say <TT>--help</TT> but
also if you supply anything on the command line that ChomboVis is
unable to interpret -- misspelled options, nonexistent options,
missing equals signs, etc.

<H1><TT>chombobrowser, chombodata and chombodatalite</TT></H1>

These are not command-line options but rather alternatives to
<TT>chombovis</TT> itself.  <TT>chombodata</TT> loads a subset of the
ChomboVis system -- the subset which does not render (whether on- or
off-screen).  For a huge dataset, this may be your only option, as the
lion's share of ChomboVis memory usage goes to doing the rendering.
<TT>chombobrowser</TT> is <TT>chombodata</TT> plus <A
HREF="Data_browser.html">data browser</A> functionality.
<TT>chombodata</TT> and <TT>chombobrowser</TT> accept the same
command-line options as does <TT>chombovis</TT>.

<P> chombodatalite loads even less than chombodata, in fact you can
build chombodatalite without even building or linking to anything VTK.
Chombodatalite gives you everything chombodata does, except: (1) the
Reader_API object, and (2) the command-line options (chombodatalite is
little more than a script that sets some environment variables and
delegates to Python).

<P>
Example:
<P>
<PRE>
    $ chombobrowser -i data/test.2d.hdf5 user_script=examples/count_cells.py
    level 0 : 2 boxes, 1024 cells.
    level 1 : 24 boxes, 5632 cells.
    level 2 : 84 boxes, 31936 cells.
    All levels: 110  boxes, 38592 cells.
    >>> ^d
    $
</PRE>
<P>

Actually, you would have obtained the same text output from
<TT>chombovis.</TT> But <TT>chombovis</TT> would have also rendered
the dataset; if the numbers were all you cared about, then
<TT>chombobrowser</TT> -- even <TT>chombodata</TT> perhaps -- is all
you needed.


<P>
    <hr>
    <address><a href="mailto:chombovis@davis.lbl.gov">ChomboVis Development Team</a></address>
  </body>
</html>
