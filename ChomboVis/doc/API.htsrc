<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>Application Programming Interface</title>
  </head>

  <body bgcolor="#111111" text="#FFFFFF" link="#AFE3EA" vlink="#D6B5E0"
    alink="#FFAD00">

<CENTER><FONT SIZE=18> Application Programming Interface </FONT></CENTER>
<HR>
<TOC></TOC>
<HR>

<H1> Introduction </H1>

<P> Any state you can bring the VTK render window into by means of
mouse and keyboard manipulations of the various ChomboVis GUI
controls, you can achieve with calls to the ChomboVis Python API. The
API also offers functionality, not necessarily related to
visualization, for analyzing, generating, and modifying ChomboVis
data.  The ChomboVis API consists of the following Python classes (and
one module):

<!--Insert classlist here-->

<P> The classes whose names end in <TT>Api</TT> are for controlling
the visualization.  The other classes are for data analysis,
generation and modification.

<P> There are two ways to use these classes: interactively, and
by means of a script.

<H2> Interactive mode </H2>

<P> To use the API interactively, start ChomboVis with the <TT>-i</TT>
option.  That leaves a Python prompt (it looks like this:
<TT>&gt;&gt;&gt;</TT>) in the xterm.  To obtain an instance of any of
the visualization classes -- <EM>the</EM> instance, as these are
singletons -- observe the following convention:

<PRE>
>>> c.clip
</PRE>

returns the instance of ClipApi,

<PRE>
>>> c.cmap
</PRE>

returns the instance of CmapApi, etc.

<P> Among the data classes, VisualizableDataset is the "top-level"
one.  At any time during a ChomboVis session, a single
VisualizableDataset is loaded into the visualization system.  To
obtain that instance of the class, type

<PRE>
>>> c.reader.getVisualizableDataset()
</PRE>

<P> BoxLayoutData and BoxLayout instances can be obtained from
VisualizableDataset.  Box instances can be constructed directly, or
obtained from other data classes.

<H2> Script mode </H2>

A ChomboVis script is a Python script (<TT>something.py</TT>) that
uses the ChomboVis API (in addition to anything from Python itself).
Everything legal in interactive mode is legal in a script, with the
qualification that the "c" symbol, which is available automatically in
interactive mode, must be obtained more formally.  The following
boilerplate, which should appear at the top of every ChomboVis script,
will do the trick:

<PRE>
---------------- something.py -------------
import chombovis
c=chombovis.latest()
...more stuff...
---------------- end of script ------------
</PRE>

<P> Of course you do not have to call it "c".  The return value from
<TT>chombovis.latest()</TT> is an instance of a class called
ChomboVis.  The ChomboVis class contains a great deal but the public
interface is best thought of as consisting of just that
already-mentioned collection of references to the *Api classes --
<TT>clip, cmap, eb, grid, iso, misc, particles, reader, slice, stream
and volume.</TT>

<P> There are three ways to get a ChomboVis script executed.  The
first is to start ChomboVis in interactive mode (<TT>chombovis
-i</TT>) and then (at any time) type

<PRE>
>>> import something
</PRE>

The second way to execute a ChomboVis script is to submit it on the
command line:

<PRE>
$ chombovis user_script=something.py
</PRE>

This gets the script executed at start-up.  The third way is to store
your script in a file called .chombovisrc (in your home directory,
the ChomboVis home directory, or the current working directory).
ChomboVis executes your .chombovisrc file (if any) even before it
executes anything passed as "user_script" on the command line.  See <A
HREF="Other_features.html">here</A> for more about .chombovisrc.

<P> The <TT>examples</TT> directory contains several ChomboVis
scripts.  The most broad-ranging of them is api_test.py, but it may
not be a good choice for a Python beginner.  Better first stops would
be saturn.py and bulldog.py: these are, in fact, discussed and
dissected below.


<H1> Visualization examples </H1>

<H2> Setting this, setting that </H2>

From the ChomboVis home directory (where your <TT>chombovis</TT>
script is), type

<PRE>
    ./chombovis -i data/test.3d.double.hdf5
</PRE>

and you should see the standard-issue 3D poisson dataset.  But if you
add one more item to the command line...

<PRE>
    ./chombovis -i  user_script=examples/saturn.py data/test.3d.double.hdf5
</PRE>

...then you should see something like a ringed planet.  Let us now
walk through the script that did that, <TT>saturn.py</TT>.

<PRE>
import chombovis
c = chombovis.latest()

for a in 'x','y':
    c.slice.toggleVisibility( on_off=0, axis=a )
c.grid.toggleDomainBox( 0 )
c.iso.toggleVisibility( 1 )
c.iso.setMin( -0.0288 )
c.iso.setMax( -0.0288 )
c.iso.setColor( rgb=(0.54,0.36,0.0) )
c.misc.setViewParams(
    camera_position=(-34.47, 49.28, -1.53),
    axes_camera_position=(-4.01, 7.88, -2.42),
    focal_point=(-6.86, -4.89, 15.15),
    world_point=(-6.80, -4.97, 14.83, 1.0),
    display_point=(205.5, 152.0, 0.85),
    view_up=(0.16, -0.21, -0.96),
    parallel_scale=8.0,
    clipping_range=(11.10, 346.63))

c.misc.guiUpdate()

</PRE>

We start with some boilerplate.  Every ChomboVis script needs to
obtain an instance of the ChomboVis class, hence <TT>c =
chombovis.latest().</TT> That returns not just any instance of
ChomboVis but the specific instance running in the ChomboVis GUI.

<P> The first thing we do is turn off two of the three slicing planes.
Then we turn off the domain box.  We turn on the isosurface and
position it at -0.0288, and set its color to a nice methane brown.

<P> The next statement (<TT>misc.setViewParams(...)</TT>) zooms the
object away, translates it up and right, and rotates it a bit.  VTK
employs a fairly elaborate system of parameters and coordinates to
define positions and orientations.  If you understand what they all
mean, you might come up with them ex tempore.  The rest of us can rely
on the "Camera parameters" dialog (under ChomboVis' "Tools" menu).
The idea is that the first time, you use the mouse to place your
object where you want it.  You bring up the "Camera parameters"
dialog, and press its "dump" button: this prints all those numbers to
standard out, with exactly the right punctuation for you to cut and
paste into a script such as this one.

<P> We have two more lines to discuss.

<P> <TT>c.misc.guiUpdate()</TT> makes your GUI controls reflect the
settings.  For example, the "Slices" control will show only one
activated "visible" checkbutton -- the one for the z axis.

<P> If you load saturn.py on data other than test.3d.double.hdf5, you
will not see the ringed planet; the script makes assumptions about the
data.  Nonetheless, the script will run to completion.  Not so
bulldog.py: where it says <TT>c.reader.setVisibleLevelMax(1)</TT> it
assumes your dataset has at least two levels of refinement.

<P> You do not need to know much Python to do rudimentary ChomboVis
scripting.  You can call visualization functions -- in these examples,
everything between <TT>c = chombovis.latest()</TT> and
<TT>c.misc.guiUpdate()</TT> -- in most any order.  So it's hard to
make a mistake.  As with .cshrc (or bashrc, etc), you can settle for
just setting values, but if you want to, you can tap the power of a
full-blown programming language interpreter.  Perhaps the one most
important thing to know about Python is that indentation is meaningful
(it indicates control structure nesting).  To learn more, we recommend
Lutz's _Learning Python_.

<H2> Extra buttons and a useful .chombovisrc </H2>

Here is a way to add shortcut buttons right where you can always see
them.  Try,

<P>
<PRE>
    chombovis user_script=resetcamera.py data/test.2d.hdf5
</PRE>
<P>

You should obtain the usual display, plus two buttons at the bottom.
The "reset camera" button undoes any panning, rotating or zooming that
have happened since ChomboVis came up.  (Try it; press the right mouse
button and move the mouse, then press "reset camera".)

<P> If you like these buttons, you can arrange to have them appear any
time you start ChomboVis (with no need to say "user_script...").  Just
copy examples/resetcamera.py to your home directory and rename it as
indicated below:

<P>
<PRE>
    cp examples/resetcamera.py ~/.chombovisrc.
</PRE>

<P> What happens here is that when ChomboVis comes up it looks for a
~/.chombovisrc and tries to execute it as though it were a Python
script.

<P> If you have a .chombovisrc, the user_script command line option
becomes available for loading a second script.  ChomboVis will always
execute .chombovisrc first.

<P> This script is heavier on the Python than was our previous
example, saturn.py.  But let's walk through it.  The ChomboVis API
call,

<P>
<PRE>
c.misc.savePosition( '/tmp/chombovis_cameras.state' )
</PRE>

<P> saves camera position information to the indicated file, from
which we will retrieve it when the button is pushed.
<TT>misc.savePosition</TT> is one of several ChomboVis API functions
that deal with saving and restoring the state of the system.

<P> The next command creates a button and binds a ChomboVis API
function, misc.restoreState(), to it.  If you are not experienced with
Python, the syntax for binding functions to Python buttons may look
somewhat forbidding.  Nonetheless, if you experiment and substitute
other ChomboVis API calls for the restoreState(), you are not at all
unlikely to get it right the first time.

<P> For a more elaborate variation on this theme, see examples/undo.py.

<H2> How to make a movie </H2>

Suppose you have a collection of hdf5 files, and you would like to use
ChomboVis to produce an image of each one of them.  Here's a script
that produces a ppm from each hdf5.

<P>
<PRE>
import os
import chombovis
c = chombovis.latest()
for filename in os.listdir('.'):
    if filename[-5:] == '.hdf5':
        c.misc.loadHDF5( filename )
        c.misc.hardCopy( outfile_name = filename[:-5] + '.ppm', mag_factor=1 )
</PRE>

<P> Save this 

<P> This script will save an image of the default state.  If you need
to bring ChomboVis to some other state, then call the necessary API
functions after the "<TT>c.misc.loadHDF5</TT>" line.  An alternative
is to load one of your files, use the GUI to bring it to the desired
state, save that state (pull down the File menu and select "Save
state"), then use the state_file command line option.

<P> For something more elaborate, see examples/movie.py.  (Execute
movie.py with <TT>-h</TT> on the command line and it will print
documentation and examples.)

<H1> Data API examples </H1>

The data in your hdf5 file is available to you through the <A
HREF="visualizable_dataset.html">VisualizableDataset</A> class.  You
get started with

<PRE>
>>> v = c.reader.getVisualizableDataset()
</PRE>

<P>
The variable <TT>v</TT> is not a copy but a reference; if you typed
<TT>chombovis -i</TT> (as opposed to <TT>chombobrowser -i</TT> or
<TT>chombodata -i</TT>) then modifications you make to v will show up
in the VTK display.

<P> Maybe you want to generate a new data component, and save a 2D
slice (that includes that new component) to an hdf5 file.

<PRE>
>>> def mydiff(x,y): return x - 10*y
>>> v.defineNewComponent( 'mydiff', mydiff, (0,2) )
>>> v_slice = v.slice( 'y', 3.14 )
>>> v_slice.saveToHDF5( '/tmp/v_slice.hdf5' )
</PRE>

<P> The field data of a VisualizableDataset lives in instances of the
<A HREF="box_layout_data.html">BoxLayoutData</A> class -- one instance
for each level of refinement cross-product data component.  Continuing
with our example,

<PRE>
>>> bld = v.getBoxLayoutData( level=v.getNumLevels()-1, component=0 )
>>> print bld.sum()
</PRE>

<P> ...prints the sum of all the values of the 0-th component at the
highest level of refinement.  Suppose we are only interested in boxes
0, 1 and 2 of that BoxLayoutData.  Then this...

<PRE>
>>> bld.clamp( (0,1,2) )
>>> print bld.stdDev()
>>> bld.unclamp()
</PRE>

<P> ...prints the standard deviation of the values in just those
boxes.

<P> Now to modify the data a little:

<PRE>
>>> bld *= 10.0
>>> bld.pow(2.0)
</PRE>

<P> BoxLayoutData offers a full complement of in-place and global
arithmetic and transcendental functions.

<P> If you have ChomboVis running, and you want to see the effect of
these modifications to the BoxLayoutData, switch away from, and then
back to, the current component.

<P> To fiddle with data and <EM>not</EM> affect what you see in
ChomboVis, obtain a copy of your data:

<PRE>
>>> bld_copy = bld.clone()
</PRE>

<P> or

<PRE>
>>> bld_copy = bld + 0
</PRE>

<hr>
<address><a href="mailto:chombovis@davis.lbl.gov">ChomboVis Development Team</a></address>
 </body>
</html>


