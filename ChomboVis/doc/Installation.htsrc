<HTML>

  <body bgcolor="#111111" text="#FFFFFF" link="#AFE3EA" vlink="#D6B5E0"
    alink="#FFAD00">

<CENTER><FONT SIZE=18> Installation </FONT></CENTER>
<HR>
<TOC></TOC>
<HR>
<H1>Distribution</H1>

This software originates at the Applied Numerical Algorithms Group,
ANAG, which is part of the Computational Research Division, CRD,
located at Lawrence Berkeley National Laboratory, LBNL.  It originated
as a collaborative effort between ANAG and LBNL/NERSC Visualization
Group, and continues to be developed by ANAG.  Related WWW sites:

<P>
<UL>
<LI> <A TARGET="_parent" HREF="http://seesar.lbl.gov/anag/chombo/chombovis.html">ChomboVis homepage</A>
<LI> <A TARGET="_parent" HREF="http://seesar.lbl.gov/anag/chombo">Chombo homepage</A>
</UL>
<UL>
<LI> <A TARGET="_parent" HREF="http://seesar.lbl.gov/anag/">ANAG homepage</A>
<LI> <A TARGET="_parent" HREF="http://www-vis.lbl.gov/">Vis. Group homepage</A>
</UL>
<UL>
<LI> <A TARGET="_parent" HREF="http://crd.lbl.gov/">CRD homepage</A>
<LI> <A TARGET="_parent" HREF="http://www.lbl.gov/">LBNL homepage</A>
</UL>

Please download the most up to date version of ChomboVis from the <A
TARGET="_parent"
HREF="http://seesar.lbl.gov/anag/chombo/chombovis.html">ChomboVis
homepage.</A> This will ensure that you have all additions and
corrections and that you will be notified of new releases of
ChomboVis.

<P> See the <A TARGET="whatever" HREF="UsersGuide.html">User's
Guide</A> included with this distribution or, go <A TARGET="_parent"
HREF="http://seesar.lbl.gov/anag/chombo/chombovis.html">here.</A>


<H1>Other software you will need</H1>

ChomboVis is built on top of a number of other software packages,
listed below.  Your computer probably has some of them already.
Tcl/Tk and Python are common, CMake, HDF5 and VTK less so.  In every
case, it is a good idea to rebuild, as it is absolutely essential that
ChomboVis and those other packages all be built against a single,
consistent, set of headers and libraries, and that your PATH select
the Python executable that corresponds to the Python headers and
libraries you built VTK and ChomboVis against.

<P> For your convenience, we distribute a single package that builds
all the uncommon and semi-common required software all at once.  That
package is called ChomboVis-x.y.z-and-everything.tar (where x.y.z is a
version number), and, like ChomboVis itself, is available on our <A
TARGET="whatever" HREF="http://davis.lbl.gov/cgi-bin/chombo/download"
>download site.</A>

<P> We recommend everyone use ChomboVis-x.y.z-and-everything.tar the
first time they build ChomboVis, or if they have not built ChomboVis
since version 3.95.0 (the first to use VTK4.x).  Subsequent ChomboVis
releases can then be built in place by themselves.  But for reference,
here is the list of prerequisite packages.

<UL>

<LI> Gnu make (also known as gmake).  You have to make sure this is the
only flavor of make that's used, when you build ChomboVis itself.

<LI> gcc 3.2.3 or later.  For your convenience,
ChomboVis_x_y_z-and-everything.tar includes the source to gcc 3.4.2.
Type "make gcc" to build and install it.

<P><LI> <A TARGET="whatever" HREF="http://hdf.ncsa.uiuc.edu/HDF5">HDF5
1.6.1</A> - used by Chombo to write data and by ChomboVis to read that
data.

<P> <LI> <A TARGET="whatever" HREF="http://tcl.activestate.com">Tcl 8.3 and Tk
8.3</A> - Python uses Tk, Tk uses Tcl.

<P> <LI> <A TARGET="whatever" HREF="http://www.python.org">Python
2.3.3</A> - ChomboVis is, in part, Python code.

<P> <LI> <A TARGET="whatever" HREF="http://pmw.sourceforge.net">Pmw.1.2</A> - Python
megawidgets.  (Nothing to build -- just untar under
/usr/local/lib/python2.3/site-packages or the analogous location on
your system.)

<P> <LI> <A TARGET="whatever" HREF="http://www.mesa3d.org">Mesa 6.2</A> -
If you don't have OpenGL support on your graphics card, you need
Mesa.  But even if you do have hardware OpenGL, you still need mesa if
you want to do off-screen rendering (which makes movie-making more
convenient).

<P> <LI> <A TARGET="whatever" HREF="http://www.kitware.com">CMake 1.8</A> -
CMake is an autoconf/automake alternative that is required for building
VTK (see below) and ChomboVis' own VTK extensions.

<P> <LI> <A TARGET="whatever" HREF="http://www.kitware.com"> VTK
4.4</A> - ChomboVis calls into and extends VTK.  You will need VTK4.4
specifically, which can be obtained from Kitware's CVS server (module
VTK, tag release-4-4), or from <A TARGET="whatever"
HREF="http://davis.lbl.gov/cgi-bin/chombo/download">our download
site</A>, where it is called vtk4.4-src.tar.gz.

</UL>

These version numbers are the ones we test against, and at this
writing they are the most recent, or nearly most recent, versions
available.  ChomboVis may or may not work with other versions.  Python
2.1 is fine.  Any Tcl/Tk since 8.2 is probably fine, but make sure
that your Python was built against the same version of Tcl/Tk you have
on your machine (so to be sure about that, it's a good idea to build,
rather than install binaries of, Python).  The HDF5 version should
match the one you build Chombo against, should you choose to build
Chombo as well.  The only really strict thing here is: you must use
VTK version 4.4.

<H2>Python hazards</H2>

One of the most frequent problems people encounter is the result of
having more than one version of Python on their machine.  The danger
is that you build VTK against one Python, while your PATH environment
variable gives precedence to the other Python.  If you make this
mistake, your VTK appear to behave normally, ChomboVis will build, but
ChomboVis will fail at start-up time.  Using our
ChomboVis-x.y.z-and-everything package eliminates this risk.

<P> The Python we need here must have Tkinter compiled in.  If not
sure, type "python" and then at the <TT>">>>"</TT> prompt, type
"import Tkinter".  If there's no error message, then you're good to
go.

<H2>Tips for building VTK 4.4</H2>

Again, if you use the ChomboVis-x.y.z-and-everything package, you
probably don't need to read this section.

<P> You need to configure the VTK build so that it uses optional
packages known as "hybrid", "patented" and "rendering", uses "GL2PS",
and supports Python and Tcl "wrapping".  Run cmake or ccmake (a GUI
front end to cmake) to configure the build.  An alternative is to use
the build_install_vtk.sh script that comes with
ChomboVis-x.y.z-and-everything.tar (again, assuming you are not going
to use the and-everything distribution from beginning to end, in which
case you don't need to be reading this!).  In accordance with the
instructions in build_install_vtk.sh, edit the config.vtk file to
indicate where certain things are on your computer.  Then invoke
build_install_vtk.sh.

<P> To check that your VTK installation was successful, go to the
Examples/Rendering/Python directory under your VTK source tree and
type <TT>vtkpython Cylinder.py.</TT> If you now see an orange
eight-sided cylinder, then you are probably ready to build ChomboVis.

</UL>

<H1>Building ChomboVis</H1>

If you use our ChomboVis-x.y.z-and-everything package, you probably
don't need to read this section either.

<UL>

<LI> Unpack (gunzip; tar xf) 

<LI> Edit user.make in the ChomboVis home directory to indicate where
various header files and libraries are to be found on your machine.
The "EXTRA_HDF5_LIBS" line is for indicating libraries which your
version of HDF5 uses (e.g. "-lz").

<LI> Type the by-now-pretty-standard "./configure; make" sequence.  If
you are not the system administrator, you should specify an
installation directory, e.g.  "./configure --prefix=$HOME/usr".

<P>
In addition to configure's many built-in options (type "./configure --help), we
have a few specific to ChomboVis:
<UL>
    <LI> --without-vtk Builds a graphics-free subset of ChomboVis, which is
        good for use as a sort of desk calculator.  You get the chombodatalite
        program (but not chombovis, chombobrowser or chombodata).  With
        chombodatalite you can load Python objects of type VisualizableDataset,
        BoxLayoutData and others lower down the abstraction hierarchy.  See
        the API documentation under these classes.
        If you simply can't build VTK, this is an option to fall back on.
    <LI> --enable-unittests Builds some test programs, probably of interest only
        to ChomboVis developers.
    <LI> --enable-debug Puts -g on all the compile lines, otherwise they have
         -O2 -NDEBUG.
    <LI> --enable-profile Puts -pg on all the compile and link lines.
</UL>

<LI> Type "make install".  This will install the chombovis script in
the "bin" directory under whatever you specified after --prefix (or in
/usr/local/bin if you just typed "./configure" without the --prefix
option).

</UL>

If "make" succeeded, go to the next section, "Testing ChomboVis".  If
not:

<UL>

<LI> Verify you have read all the information above, followed the
steps in order, and entered all the information correctly.

<LI> Consult with whoever installed the prerequisite software listed
above to verify that is was installed correctly and that you are
referencing it correctly, remembering to confirm version numbers.

<LI> Contact <A HREF="mailto:chombovis@davis.lbl.gov">us</A> for further help.
</UL>


<H1>Testing ChomboVis</H1>

<P>
From the directory where ChomboVis was installed give the command:
<P><PRE>
    > ./chombovis
</PRE>

<P> This should put on your screen a black rectangle with a row of
menu options along the top.  Pull down the File menu and load the file
<TT>share/ChomboVis/data/test.3d.double.hdf5.</TT> In place of the
black rectangle, you should now see a a 3D, double precision, test
data set generated by the Poisson example in the main Chombo
distribution.  This data set has three levels of refinement.

<P>
If this seems to work, go to share/ChomboVis/test and try:
<P><PRE>
   > ./test_all.sh
</PRE>


<H1>Running ChomboVis</H1>

You should now be able to run ChomboVis on the machine(s) where it is
installed from any directory with any 2D or 3D HDF5 data set generated
by the Chombo software, by the ascii2hdf5 program that comes with
ChomboVis.  For further information, see the rest of this user's
guide.


<H1>Platform-specific issues</H1>

ChomboVis has only been tested, by us, on Linux (Red Hat 7.1 through
9.0, SuSe 9, Slackware 7.0 with kernels 2.2.16, 2.4.7, 2.4.18 and
2.4.21); Mac OS X Darwin 7.2.0; an AMD Opteron 64-bit machine running
Suse 9.0 .  It will build and run on Solaris and Irix after some work
(see below).  A much earlier version, 2.0, is known to work properly
on Linux, i386 Solaris and Irix 6.5.

<H2>Mac OS X 10.3 (Panther, Darwin kernel 7.2.0)</H2>

<A HREF="http://fink.sourceforge.net">Fink</A> is the way to go here.  We
won't be using the -and-everything build system, but you will still
need a few of the packages there, so might as well download it.

<UL>
    <LI> Download and install <A HREF="http://fink.sourceforge.net">Fink.</A>
You'll need to be root.  Thereafter, make sure /sw/bin is on your PATH
and /sw/lib on your DYLD_LIBRARY_PATH

    <LI> Use Fink to build and install VTK (specifically, VTK-4.4 with
Python support)
<BR><PRE>
        $ fink install vtk-py23
</PRE><BR>

    <LI> Install the glut library:
<BR><PRE>
        $ fink install glut
</PRE></BR>

    <LI> Build and install hdf5 (whose source is found in our
-and-everything tarball).  There's nothing special to do here; untar,
configure, make install.  You could use Fink, if you don't mind the
fact it will also install f2c, fort77 and g77, none of which are
needed for ChomboVis.

    <LI> Install Pmw-1.2.  You'll find Pmw-1.2.tar.gz in the -and-everything
tarball.  Copy it to /sw/lib/python2.3/site-packages (assuming you accepted
<TT>/sw</TT> -- the default -- as Fink's installation root directory) and
untar it there.

    <LI> Build and install ChomboVis
    <UL>

        <LI> Untar ChomboVis-x.y.z.tar.gz (also found in the
-and-everything tarball).

        <LI> Edit user.make to indicate correct paths on your system.
Since you used Fink, you can set INSTALL_HOME to /sw.  If you didn't
use Fink to install HDF5, set HDF5_INCLUDE_DIR and HDF5_LIBRARY_DIR
appropriately.

        <LI> Set the environment variable MACOSX_DEPLOYMENT_TARGET to
10.3, 10.4 or whatever version of Mac OS X you have.

        <LI> configure; make install.
    </UL>
</UL>

Run ChomboVis in the usual way.  Everything but offscreen rendering
should work.


<H2>SGI Irix 6.5 (IRIX64)</H2>

The following comments come from a user who is running ChomboVis 3.5
on two SGI machines.  One is an SGI Onyx with six 400 MHz CPUs and
InfiniteReality2 graphics.  It responds to the uname command as follows:

<PRE>
$ uname -a
IRIX64 [host name] 6.5 10100655 IP25
$ uname -R
6.5 6.5.16f
</PRE>

<P>
The other is
an SGI Onyx with twelve 194 MHz CPUs and InfiniteReality graphics.
It identifies itself as follows:

<PRE>
$ uname -a 
IRIX64 [host name] 6.5 10100655 IP25
$uname -R
6.5 6.5.14m
</PRE>

<P> And here are the user's comments.

<PRE>
I finally was able to build version 3.5 on an Onyx.  Here are the
changes that I had to make.

1. Build VTK 3.2 with the GNU compliler.  Building VTK with the SGI
compiler will work.  However, you will encounter into runtime loader
errors (rld) complaining about unresolved symbols when trying to run a
copy of Chombovis that was built with the GNU compiler.

2. In VTK 3.2 in the patented directory, the following include files:

     vtkGridSynchronizedTemplates3D.h
     vtkSynchronizedTemplates2D.h
     vtkSynchronizedTemplates3D.h

have the following lines that need to be changed from 

     friend VTK_EXPORT vtkKitwareContourFilter;

to 
 
     friend class vtkKitwareContourFilter

Otherwise the GNU compiler will fail during the build.

3. In the Chombovis directory EBLib, there is a file called EBCache.C.
The include file references "string.h".  Change this to "strings.h".

4. In the Chombovis directory Vtk, there is a file called
vtkChomboTexture.C.  Add in the following lines to define what "min"
and "max" are.

     #define min(x,y) (x < y ? x : y)
     #define max(x,y) (x > y ? x : y)

5. In the Chombovis directory Vtk, in the Makefile, make sure it can
find the vtk3.2 libraries.

     PYTHON_LIBS = $(OBJS) -L/usr/local/ChomboVis/vtk3.2_gcc/lib .......

6. Make sure your environment is set up correctly.

     setenv TCLLIBPATH /usr/local/ChomboVis/vtk3.2_gcc
     setenv LD_LIBRARY_PATH /usr/local/ChomboVis/vtk3.2_gcc/lib:/usr/local/Python/lib/python2.1/lib-dynload:/usr/local/lib
     setenv PYTHONPATH /usr/local/ChomboVis/vtk3.2_gcc/lib:/usr/local/Python/lib/python2.1:/usr/local/ChomboVis/vtk3.2_gcc/python
     setenv VTKHOME /usr/local/ChomboVis/vtk3.2_gcc

</PRE>
<P>Thanks to Fletcher Adams for that.

<H2> Solaris </H2>
<P>
<PRE>
environment : SUN BLADE 100 + Expert 3D lite / solaris 8
gcc/g++ 3.0.3, C-shell + (good old) bourne-shell

a. make is not gmake under solaris:  problems with nested calls that
would call make and not gmake in subdirs...
used a trick to have make = gmake
hint/suggestion : force make to gmake everywhere in Makefiles or let it
be configurable ??

b. grep commands in various scripts erroneous in bourne-shell mostly
because of non protected ^
hint /suggestion : protect "^..." for instance?
(problems encountered in checkVTKSetup.sh and make_doc.sh)

c. trouble with PWD in checkVTKSetup.sh, bad substitution, repaired by a
"PWD = `pwd`" before
(or it would not change dir properly since PWD is erroneously evaluated)

d. EBLIb :
EBCache.C require strings.h and not string.h under SOLARIS because of
bzero
for SUN, using bzero is OBSOLETE (BSD and not System V feature : memset
is recommended instead)
but bzero can be found thru strings.h ...

e. doc :
from chombovis.html, a couple of  .html files  referenced but not found
in ./doc ? (anag_utils.html ...)

f. utils :
std::vector instead of vector line 111 of RectanglePacker.h compiles
better...
RectanglePacker::ComputePackedDoamin() : max undeclared (put a local
macro for it)
RectanglePacker::_ToPostScript() : ofstream undeclared, include fstream
to get it + using std::ofstream
dynamic lib : SUN  ld doesn't undestand "-soname" option, removed it (or
use static lib)

g.Vtk :
std::vector better than vector only in vtkChomboTexture.cxx, idem
std::pair,  lines 145/146
GetPixelData in vtkOpenGLOffScreenRenderWindow.cxx : undeclared local
variables xloop, yloop, buffer, p_data in "sparc" section
copied  them from the further SetPixelData member function

h. misc :
in save_term.cpp,  __getpgid undeclared, replaced by getpgid

</PRE>
<P>Thanks to
<PRE>
                    Jean-Philippe NOMINE
             CEA - Direction d'Ile de France
                BP 12 91680 Bruyeres-le-Chatel
                        FRANCE
</PRE>
      
<H1>Feedback</H1>

Feel free to contact the <A HREF="mailto:chombovis@davis.lbl.gov">ANAG
group</A>, which distributed this package, with any comments about
ChomboVis.  All comments will be passed onto the specific developers
working on ChomboVis so they can better understand users' needs,
concerns and problems.


<H1>Credits</H1>

ChomboVis was, and is, developed at <A TARGET="_parent"
HREF="http://www.lbl.gov">LBNL/</A><A TARGET="_parent"
HREF="http://www.nersc.gov">NERSC</A> by <A TARGET="_parent"
HREF="http://seesar.lbl.gov/anag/">ANAG</A> and the <A
TARGET="_parent" HREF="http://www-vis.lbl.gov">Visualization
Group.</A> The <A HREF="mailto:chombovis@davis.lbl.gov">ChomboVis
development team</A> has included the following people: Terry Ligocki,
John Shalf, Ted Sternberg and Brian Van Straalen.


<H1>Disclaimer</H1>

This document was prepared as an account of work sponsored by the United
States Government.  While this document is believed to contain correct
information, neither the United States Government nor any agency thereof,
nor The Regents of the University of California, nor any of their
employees, makes any warranty, express or implied, or assumes any legal
responsibility for the accuracy, completeness, or usefulness of any
information, apparatus, product, or process disclosed, or represents that
its use would not infringe privately owned rights.  Reference herein to any
specific commercial product, process, or service by its trade name,
trademark, manufacturer, or otherwise, does not necessarily constitute or
imply its endorsement, recommendation, or favoring by the United States
Government or any agency thereof, or The Regents of the University of
California,  The views and opinion authors expressed herein do not
necessarily state or reflect those of the United States Government or any
agency thereof, or The Regents of the University of California.

</HTML>
