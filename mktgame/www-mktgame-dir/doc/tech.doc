                 TECHNICAL DOCUMENTATION FOR AQC MARKET GAME                  
                             Theodore Sternberg
                    U.C. Berkeley Haas School of Business
                        sternber@haas.berkeley.edu
                             November 1, 1994
                             TABLE OF CONTENTS
O.   AQC
  A. Short summary
  B. What the user sees
  C. UNIX multitasking issues
  D. The bond market and endogeneity of the interest rate
  E. What determines the stock price?
I.   Utility programs
  A. poisson (noise trader)
  B. exdiv   (dividend payouts)
  C. initact (account initialization)
  D. discwind (discount window)
  E. delordbk (order book deletion)
  F. ticker  (trade-by-trade data in ASCII)
II.  Changing the names of the securities--how to do it.
III. Forced sales
IV.  Secret menu options
V.   American options
VI.  Foreign currencies


                         THE CONTENTS THEMSELVES
O. AQC
  A. Short summary 
AQC stands for automated quotation and clearing.  A computerised securities
exchange, it enables users of a UNIX system to place market and limit orders
for a variety of securities.  It crosses market orders with limit orders.  It
provides users with information on their accounts, on the limit order books,
and on the trades that have taken place.  It provides for a bond market, thus
rendering the interest rate endogenous.  It provides facilities for trading
and exercising American options on any traded security.

Under UNIX, a large number of people can run the aqc program simultaneously.
Moreover, all of these people will see the same limit order books, account and
trade histories, etc.

  B. What the user sees
After supplying a login id and password, the user faces the top-level menu:
this lists the securities that may be traded, and a few informational options.
Upon choosing a security, the user sees a menu that offers (1) information on
his account and others' activity in the security's market, (2) a view of the
limit order book, (3) the possibility to place a market or limit order, (4)
the possibility to cancel one of his standing limit orders, and (5) for
option-type securities, the possibility of exercising.

  C. UNIX multitasking issues
The AQC program runs in the instructor's account as a SUID program, security
mode 4755.  Thus, all users on the UNIX system may execute the program
and have the program read and write to files that are otherwise not available
to users other than the instructor.  (These files hold the limit order books
and the trading histories of all the players.)

The result is that a large number of people can run the aqc program
simultaneously.  Moreover, all of these people will see the same limit
order books, account and trade histories, etc.

Read access to the information files is completely unrestricted.  Write
access, on the other hand, is controlled so that only one aqc process at a
time may do anything that writes--e.g. place an order, execute a trade, or
exercise an option.  This "traffic control" is accomplished via a server
program that is always running in the background.  Anytime an aqc process
needs to write to a file, it seeks "permission" from the server; permission is
granted only if no other aqc process is writing a file.  Once permission is
granted, aqc writes what it needs to write, and when finished sends the server
a signal that it is done.

  D. The bond market and endogeneity of the interest rate
In addition to stocks, bonds, options and whatever, there is a special
asset in this game, cash.  Cash earns no interest.  Thus, players have
a fairly limited demand for cash.  On the other hand, all transactions are
exchanges of a security for cash.

This becomes important when a trade leaves someone with negative cash.
Clearly, if we let players have interest-free loans, that establishes the
interest rate at zero and renders the bond market irrelevant.  So to avoid
interest-free loans, as soon as anyone's cash balance goes negative, the
program places a market sell order for him in the bond market.  (If there is
more than one bond market, we can select the market we want to use for these
forced sales--look at the security.par file.)

The interest rate does not have to be endogenous.  The discwind program
(see below) can be used to peg the interest rate.

  E. What determines the stock price?
The traders do; prices are endogenous, just as they are in the real
world.  However, as in the real world, there have to be some
fundamental determinants of value.  In the game it is convenient to
peg the stock's dividend to some easily-observable random real-world
quantity--the total change in the Dow Jones Industrial Average, the
number of points scored by the Cal football team, etc.

I. Utility programs
  A. poisson
Poisson is a noise trader; it places market orders of normally-distributed
size, at exponentially-distributed intervals.  (Hence the name; trades follow
a compound poisson process.)

Poisson reads parameters from poisson.par.  Parameters include market in which
to place trades ("security"), and parameters of the compound poisson process.

Be sure to endow Poisson with plenty of cash, so he doesn't get forced into
sales in the bond market.

  B. exdiv
Credits dividend to everyone listed in players.dat.  (So if you want to
pay the dividend to only some of the people, create a special version of
players.dat (and restore the old one before restarting the game).  Be sure
the last line of players.dat is a '%'.)

Reads parameters from exdiv.par, which includes name of security that's
paying the dividend, and the amt of the dividend. 

  C. initact
"Initialize Accounts".  For every security (including the money), there
is an accounts directory (a subdirectory of the one that holds the aqc
program itself).  An accounts directory contains separate files for each
player.  Account directories are named for the security, with "act"
appended, e.g. stockact, bondact, dollaract, etc.

Before any playing can take place, these account directories and
files have to be created.  Create the account directories manually
(e.g. "mkdir stockact").  Use initact to create the players' account
files and set them to the desired initial endowments.

Initact reads initact.par, from which it learns what security to act
on, what to set the endowment to, and what time and date to stamp the
endowment with.  If an account already exists for a player, initact
appends a record to it.  If no account exists, initact creates one.

Initact acts on the accounts of everyone mentioned in the players.dat
file.  Players.dat lists players' real names, their knicknames, and
their passwords.  The last line of players.dat should be a "%" in the
first column.  (Thus, if you want initact to ignore some players,
just move their names below the "%".)  The first row of players.dat
indicates section of the course.  This is useful for producing standings
(see the "#" option) by section, should that be useful for grading
purposes.  Section 0 is reserved for Fed and poisson: it exempts them
from the order-limit rules everyone else is subject to.  

  D. discwind
Discount window.  Places limit orders for the Fed account in the bond
market (or whatever market you wish to use for pegging the interest
rate.)  Discwind places these orders at a prespecified time interval,
and sets the price to reflect a constant interest rate.  Parameter
file discwind.par specifies that time interval, the market, and the
interest rate the prices of these orders are to reflect.  It's
possible to place limit orders on the bid side alone, or on both
sides.  

  E. delordbk
Deletes order books for selected securities (program prompts for securities).
Useful before a joint dividend/investment/capital structure decision that
will result in a jump in the security's true value (and that jump won't be
necessarily equal to the dividend).

Use delordbk, rather than just deleting the order book files, as delordbk
records order deletions in players' *.act files.

There is no delordbk.par file.
  
  F. ticker
Produces an ASCII file showing trade-by-trade prices, in whatever
security you wish.  Output of ticker is in a file called
ticker.<security-name>.

II. Changing the names and number of the securities--how to do it.
Security names may not exceed six letters.
  A. Edit security.par, indicating names of securities, their symbols
        in the menu, their currencies, and extra data for option securities.
  B. Create new directories for .act files, diary, and order book (one
        directory for each security, and the directory name is
        <security name> + "act".
  C. Set players' initial endowments in the new securities (use initact).
  D. Write prospectus and place in file named <security-name>.pro.

III. Forced sales
All transactions are exchanges of a security for cash.  Thus, if a
trade leaves someone with negative cash, a market order to sell in
the bond market is placed for him immediately.  In effect, he is
forced to borrow short-term to raise cash.  (The forced sale doesn't
have to be in the bond market: designate which market you want,
in security.par.)

Function cross() checks for negative cash for both sides to a
just-executed trade.  It does so by calling check_neg_cash() (in
forcesal.c), which appends short-cash offenders' names to a list
that's global to forcesal.c.

Function forced_sale() (in forcesal.c) is invoked at the end of
handle_order(), just before the server is released.  forced_sale()
looks at the global-to-forcesal.c list of short-cash offenders.  For
each one it finds, it creates an appropriate market ORDER in the
bond market, and passes it to handle_order().  forced_sale() goes
through the entire short-cash list this way.

Forced-sale cascades: it may happen that a forced sale crosses with
the limit buy order (in bonds) of someone who is himself driven into
the short-cash club as a result.  In this case, he gets appended to
the global short-cash list (in forcesal.c), and a forced sale of
bonds is placed for him.  This seems to work without a hitch.  At the
same time, such cascades should be rare if people play rationally;
only people with excess cash have any business bidding to lend money.

Forced-sale cascades, worst-case scenario: the bid side of the bond
mkt empties out.  In this case, market orders to sell bonds don't
execute (this creates no problems for the program itself; it deals
with empty order books gracefully) and people are allowed to have
negative cash.  This amounts to an interest-free loan.  This
situation won't be rectified until (1) a limit buy order for bonds is
placed, and (2) the person with negative cash is involved in a
transaction.  Therefore it's extremely important for Fed to have a
huge limit buy order lying around at all times.  An elegant way to
provide for this is the discwind program (documented here).


IV.  Secret menu option
From the top-level menu...
  # : lists all players' holdings of all assets.  Available only to Fed.
Another privilege for Fed: Fed may log into anyone else's account, using
Fed's password.

V.  American options
  A. How to introduce an option security.
    Security.par entries have a line in which you indicate call/put, 
    underlying asset, and strike price.  It's assumed the option is
    American; if it's European, you don't need to treat it like a special
    security at all.  (You can handle the payoff to a European option
    using exdiv, same way you pay dividends, bond coupons and the like.)

  B. Conversion options.
    1. We require no new code, provided the conversion ratio is always 1:1,
       for then a conversion option is just a call option with zero exercise
       price.
    2. This isn't an unreasonable requirement.  For convertible bonds, you
       can make a 1:1 ratio reasonable by choosing an appropriate face value.

  C. Record-keeping
    1. In the underlying security's market, an option exercise shows up as
       a trade at the exercise price.
    2. In the option market, an option exercise shows up as a trade at a price
       of zero, in which the exerciser is selling his options.

  D. Who gets exercised against

    We choose a short party at random, and exercise against him up to
    the full extent of his short position.  If that doesn't exhaust the entire
    number of shares the long wants to exercise, we pick another short party
    at random and repeat this procedure.  Make sure the net supply of options
    is zero; right now, if the program can't find someone to exercise against,
    that's a segmentation fault.

VI.  Foreign currencies
AQC can handle any number of currencies, with cross-currency markets
and securities denominated in any currencies.  

In security.par, create an entry for (let's say) francs by copying
the one for dollars.  Make the obvious changes (change "dollar" to
"franc", etc.)  Make two unobvious changes: (1) designate a
"forcemkt", i.e. a market for forced sales in case a player runs out
of francs; (2) designate the currency the franc is to be denominate
in, i.e. the dollar.  Create a francact directory and run initact.

This will establish a market for francs.  It will have an order book,
and the price of francs will be some number of dollars.

What's still missing is a regular security denominated in francs.
You need at least a bond market (i.e. a market into which to direct
forced sales).  Create an entry for such a market in security.par.
This entry will indicate "franc" on the line that begins with the
word "currency:".

One currency (in this case the dollar) has special status, in the
sense that there is no market for dollars.  (Such a market would be
redundant with the market for francs.)  The "special" currency
doesn't have to be called "dollar", but its entry in security.par
does have to come after all other entries.

If you want to run a game with three or more currencies, that poses
no especial difficulties.  Just make sure all currencies are
denominated in terms of a single "special" currency.

