1. Building the AVR development system

  Followed instructions at http://avrwiki.com/wiki/index.php/Building_AVR_GCC.

  a. Build gnu binutils, with "configure --target=avr" --program-prefix="avr-"
     This is the regular all-purpose binutils distribution -- binutils-2.18.
     (2/22/08)

  b. Build gcc with 'configure --target=avr --program-prefix="avr-" --enable-languages="c,c++"'
    This is, like binutils, just the regular distribution -- gcc-3.4.2.
    (2/22/08)

  c. Build avr-libc.  Point your PATH to where you installed avr-gcc.
     Used version avr-libc-1.6.1. (2/22/08)

  d. Build avr-gdb (this isn't covered on that page unfortunately).
     Configure with --target=avr.  Used gdb-6.0.

  e. Build simulavr.
    Used simulavr-0.1.2.2.  Configured with just --prefix.  Build and installed fine.

2. Demo programs
    The short blinky.c, from _C Programming for Microcontrollers_ (an extract
    thereof being found in pdf format at http://smileymicros.com) builds after
    a bare minimum of fixups (just had to convert some C++-isms to C).
    The longer example in http://users.rcn.com/rneswold/avr/chexample.html#EXDEMOSOURCE, 
    however, compiled after I added "avr/" in the #include's, but then linking
    failed on some missing symbols -- BV and __outw, and I can't even find them
    anywhere in the avr-libc sources.  Aha, avr-libc's NEWS file says outw is
    deprecated

3. Using avr-gdb
    This isn't quite so straightforward.  Apparently (http://www.linuxjournal.com/node/7289/print)
    you need to run simulavr as a server to gdb, and what you load into gdb
    has to be something compiled in a special way.  More info at
    http://electrons.psychogenic.com/modules/arms/art/6/SimulatingandDebuggingAVRprograms.php

4. uisp (doesn't work with STK500 firmware 2.x)
   Source code: ~/circuits/AVR
   Install: ~/usr/local/uisp
   -dpart=S8515 (AT90S8515-8PC)

-- 12/25/07 --

5. avrdude
    Source: ~/usr/avr/src/avrdude-5.5
    Install: ~/usr/avr
    Typical command line for use with STK500:
      ~/usr/avr/bin/avrdude -P/dev/ttyS1 -pm8515 -v -cstk500v2 -t -Uflash:w:./blinky
    It prints some stuff and then presents you with the "avrdude>" prompt.  At that point
    I hit ^D and then it programs the atmega8515.

    STK500 connections:
        1. Serial cable goes into RS232CTRL.
        2. Ribbon cable connecting ISP6PIN to SPROG3 (no twist in ribbon!)
        3. Ribbon from PORTD to LEDS, and it works!  The LEDs blink as intended in blinky.c.

    Fuse bits
        See p.180 of the atmega8515 datasheet.
        
-- For newer comments, see etc/letters/milim/sabbatical.txt --
