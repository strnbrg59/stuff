1. Distinguish between offense and defense.

2. Bayesian start: when adding a new player, generate bogus games for him
in which he plays everyone twice, trading one 5-4 and one 4-5 game with
them.  This should start him at an "average" rating.

3. Regress on log-odds of proportional spread: s = 5-m, p = (s - 1/2)/5.
xb=log(p/(1-p)) so p=exp(xb)/(1+exp(xb)).

4. Need to drastically reduce number of dummy games generated for the
Bayesian start.  Set up 1-on-1 games (e.g. Ada Ada 5 Bob Bob 4).
But maybe the only reason the 4-way permutations are so slow is some
diagnostic code you have, which could be removed.  Profile it.  Generating
those hundreds of thousands of bogus games takes very little time.

5. Getting counterintuitive results, realized my y =
log(spread/(5-spread)) didn't make sense; games won by a spread of 2
or less tend to increase the losers' ratings and decrease the
winners', because y<0.  Switched to something that's always positive:
log((5+spread)/spread).  Results are more intuitive but inconsistent;
ratings are generally in the right ballpark but players with identical
records end up with different (differing by up to 20%) ratings (even with
WLS weight set so high as to make the "bogus games" irrelevant.

6. Gnu Scientific Library (GSL)
Source in ~/usr/src, installed to --prefix=$HOME/usr.
Working multidim minimization example: ~/usr/src/gsl-1.13/doc/examples/multimin.c
Build it with
$ gcc multimin.c -I$HOME/usr/include -L$HOME/usr/lib -lm -lgsl -lgslcblas

7. Bayesian for MLE: use a very diffuse distribution for the bogus games.
Try logistic dsn: f(z) = exp(-[x-m]/s)/(1+exp(-[x-m]/s)),
f'(z) = 1/(s(1+exp(-[x-m]/s))).  Choose m=0 and s fairly large.  In the log
likelihood, give the components due to the bogus games the logistic form.
Maybe you can generate bogus games only for new players, i.e. those whose
addition to the games list makes the RHS regression X'X singular.
Probably don't need to generate dummy games either: just add, to the likelihood,
one component for every beta.

8. MLE applied to output of simulated_games.cpp does not recover correct betas.
Posted question to sci.stat.math.  Oops, bug in simulated_games.cpp: fixed
bug and now MLE recovers correct betas.  Yay.
